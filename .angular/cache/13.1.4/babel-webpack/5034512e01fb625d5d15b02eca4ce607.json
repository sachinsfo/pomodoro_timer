{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { TimerTypeEnum } from '../shared/enums/timertype.enum';\nimport { TimerListComponent } from './timer-list/timer-list.component';\nimport { get_minutes_seconds } from '../helpers/get_minutes_seconds';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/slider\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./timer-item/timer-item.component\";\nimport * as i4 from \"./timer-list/timer-list.component\";\nimport * as i5 from \"@angular/material/checkbox\";\nconst _c0 = [\"initialSetTime\"];\nconst _c1 = [\"timeTextValue\"];\nconst _c2 = [\"startButton\"];\nconst _c3 = [\"stopButton\"];\n\nfunction TimerComponent_app_timer_item_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-timer-item\", 21);\n    i0.ɵɵlistener(\"newTimerItemEvent\", function TimerComponent_app_timer_item_15_Template_app_timer_item_newTimerItemEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.newTimerAdded($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TimerComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"ul\");\n    i0.ɵɵelementStart(2, \"li\");\n    i0.ɵɵtext(3, \"You can use the default 25 minute timer by directly clicking the Start button\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"li\");\n    i0.ɵɵtext(5, \"For custom timers, select a type from the dropdown, key in your desired minutes into the input box and click add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"li\");\n    i0.ɵɵtext(7, \"This will add your timers to an activity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"li\");\n    i0.ɵɵtext(9, \"Add one or more timers to the activity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"li\");\n    i0.ɵɵtext(11, \"Click trash icon to delete your timers from the activity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"li\");\n    i0.ɵɵtext(13, \"Click 'Load activity' to load your timers sequentially into the main timer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"li\");\n    i0.ɵɵtext(15, \"This will replace the default 25 minute timer with the first timer from your activity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"li\");\n    i0.ɵɵtext(17, \"Click start to start your timers\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"li\");\n    i0.ɵɵtext(19, \"Use penalty timer: Tick this checkbox to add your 'away' time as penalty whenever you 'Stop' a timer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"li\");\n    i0.ɵɵtext(21, \"Auto start next timer: If you uncheck this, you have to manually click start for each timer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"li\");\n    i0.ɵɵtext(23, \"Note: Once you click 'Load activity', you cannot make any modifications to the timers.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c4 = function (a0) {\n  return {\n    \"font-size\": a0\n  };\n};\n\nexport let TimerComponent = /*#__PURE__*/(() => {\n  class TimerComponent {\n    constructor() {\n      this.penalty = 0;\n      this.chkboxPenaltyTime = false;\n      this.chkboxAutoTimer = true;\n      this.showInstructions = false;\n      this.activity_loaded = false;\n      this.seconds_remaining_event = new EventEmitter();\n      this.initialSetTimeMinutes = 25;\n      this.timer_list = []; // use to show completed icon - operately independently\n\n      this.num_of_timers_completed = 0;\n      this.current_time_seconds = this.initialSetTimeMinutes * 60;\n      this.minutes_minutes = Math.floor(this.current_time_seconds / 60);\n      this.minutes_seconds = this.current_time_seconds % 60;\n    }\n\n    ngOnInit() {\n      //TODO Calculate efficiency of the activity whenever penalty is used\n      this.timer_list.push({\n        type: TimerTypeEnum.Regular,\n        time_in_min: 25,\n        is_complete: false\n      });\n    }\n\n    ngDoCheck() {\n      if (!this.initialSetTimeMinutes) this.initialSetTimeMinutes = 1;\n      let mult = 6;\n\n      if (this.timeTextValue.value * mult < 25) {\n        this.paragraphFontSize = 25 + 'px';\n      } else {\n        this.paragraphFontSize = this.timeTextValue.value * mult + 'px';\n      }\n    }\n\n    updateTimer(new_time) {\n      let m = get_minutes_seconds(this.current_time_seconds);\n      this.minutes_minutes = m[0];\n      this.minutes_seconds = m[1];\n    }\n\n    loadNextTimer() {\n      if (this.timer_list.length > 0) {\n        let newTimer = this.timer_list.shift();\n        this.current_time_seconds = newTimer.time_in_min * 60;\n        this.updateTimer(this.current_time_seconds);\n      }\n    }\n\n    loadNewActivity(event) {\n      // event.forEach(timer => {\n      //   timer.time_in_min = 0.2;\n      // });\n      this.activity_loaded = true;\n      this.timer_list = [...event];\n      this.loadFirstActivity(this.timer_list[0]);\n    }\n\n    loadFirstActivity(timer) {\n      this.initialSetTimeMinutes = timer.time_in_min;\n      this.onSetTime();\n    }\n\n    onStart() {\n      // if penalty is zero that means clock is stopped by the user \n      // Otherwise, the timer is complete\n      if (this.penalty === 0) {\n        this.loadNextTimer();\n      } else {\n        clearInterval(this.penaltyTimer);\n      }\n\n      if (this.current_time_seconds > 0) {\n        this.current_time_seconds += this.penalty;\n        this.timer = setInterval(() => {\n          this.current_time_seconds -= 1;\n          this.updateTimer(this.current_time_seconds);\n          this.seconds_remaining_event.emit(this.current_time_seconds);\n          this.timerListChild.calcTotalTimeLeft(this.current_time_seconds);\n          if (this.current_time_seconds === 0) this.onComplete();\n        }, 1000);\n      }\n\n      this.startButton.nativeElement.disabled = true;\n      this.stopButton.nativeElement.disabled = false;\n    }\n\n    onComplete() {\n      clearInterval(this.timer);\n      this.penalty = 0;\n\n      if (this.chkboxAutoTimer) {\n        this.onStart();\n      } //when all timers are exhausted\n\n\n      if (this.current_time_seconds === 0) {\n        this.loadNextTimer();\n        this.stopButton.nativeElement.disabled = true;\n        this.startButton.nativeElement.disabled = false;\n      }\n\n      this.num_of_timers_completed += 1;\n      this.timerListChild.timerComplete(this.num_of_timers_completed);\n    }\n\n    onStop() {\n      clearInterval(this.timer); // if all the timers are complete, then no need to run the penalty timer\n\n      if (this.current_time_seconds > 0) {\n        this.stopButton.nativeElement.disabled = true;\n        this.startButton.nativeElement.disabled = false; // reset the penalty to 1 each time the stop button is clicked\n\n        if (this.chkboxPenaltyTime) {\n          this.penalty = 1;\n          this.penaltyTimer = setInterval(() => {\n            this.penalty += 1;\n          }, 1000);\n        } else {\n          clearInterval(this.penaltyTimer);\n        }\n      }\n    }\n\n    validateInitialSetMinutes() {\n      if (this.initialSetTimeMinutes <= 0) this.initialSetTimeMinutes = 1;\n      if (this.initialSetTimeMinutes > 99) this.initialSetTimeMinutes = 99;\n      if (!this.initialSetTimeMinutes) this.initialSetTimeMinutes = 1;\n    }\n\n    onSetTime() {\n      this.validateInitialSetMinutes();\n      this.current_time_seconds = this.initialSetTimeMinutes * 60;\n      this.minutes_minutes = Math.floor(this.current_time_seconds / 60);\n      this.minutes_seconds = 0;\n      clearInterval(this.timer);\n      clearInterval(this.penaltyTimer);\n      this.stopButton.nativeElement.disabled = true;\n      this.startButton.nativeElement.disabled = false;\n    }\n\n    onChangePenaultyCheckbox(event) {\n      this.chkboxPenaltyTime = event.checked;\n\n      if (!this.chkboxPenaltyTime) {\n        clearInterval(this.penaltyTimer);\n        this.penalty = 0;\n      }\n    }\n\n    onChangeAutoTimerCheckbox(event) {\n      this.chkboxAutoTimer = event.checked;\n    }\n\n    newTimerAdded(event) {\n      this.timerListChild.onAdd(event);\n    }\n\n    toggleShowHideInstructions() {\n      this.showInstructions = !this.showInstructions;\n    }\n\n  }\n\n  TimerComponent.ɵfac = function TimerComponent_Factory(t) {\n    return new (t || TimerComponent)();\n  };\n\n  TimerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TimerComponent,\n    selectors: [[\"app-timer\"]],\n    viewQuery: function TimerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TimerListComponent, 5);\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n        i0.ɵɵviewQuery(_c2, 7);\n        i0.ɵɵviewQuery(_c3, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.timerListChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.initialSetTimeMinutes = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.timeTextValue = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.startButton = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stopButton = _t.first);\n      }\n    },\n    outputs: {\n      seconds_remaining_event: \"seconds_remaining_event\"\n    },\n    decls: 38,\n    vars: 15,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"col-xs-4\"], [1, \"col-xs-4\", \"text-center\"], [\"min\", \"1\", \"max\", \"100\", \"step\", \"1\", \"value\", \"30\"], [\"timeTextValue\", \"\"], [1, \"col-xs-12\", \"text-center\"], [3, \"ngStyle\"], [1, \"row\", 2, \"padding\", \"10px\"], [1, \"col-xs-12\"], [3, \"newTimerItemEvent\", 4, \"ngIf\"], [3, \"loadActivityEmit\"], [1, \"col-xs-2\"], [3, \"checked\", \"change\"], [1, \"btn\", \"btn-primary\", \"btn-block\", 3, \"click\"], [\"startButton\", \"\"], [\"disabled\", \"\", 1, \"btn\", \"btn-danger\", \"btn-block\", 3, \"click\"], [\"stopButton\", \"\"], [1, \"col-xs-8\"], [3, \"click\"], [4, \"ngIf\"], [3, \"newTimerItemEvent\"]],\n    template: function TimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"mat-slider\", 4, 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 1);\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"p\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"number\");\n        i0.ɵɵpipe(12, \"number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 8);\n        i0.ɵɵelementStart(14, \"div\", 9);\n        i0.ɵɵtemplate(15, TimerComponent_app_timer_item_15_Template, 1, 0, \"app-timer-item\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 8);\n        i0.ɵɵelementStart(17, \"div\", 2);\n        i0.ɵɵelementStart(18, \"app-timer-list\", 11);\n        i0.ɵɵlistener(\"loadActivityEmit\", function TimerComponent_Template_app_timer_list_loadActivityEmit_18_listener($event) {\n          return ctx.loadNewActivity($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 12);\n        i0.ɵɵelementStart(20, \"mat-checkbox\", 13);\n        i0.ɵɵlistener(\"change\", function TimerComponent_Template_mat_checkbox_change_20_listener($event) {\n          return ctx.onChangePenaultyCheckbox($event);\n        });\n        i0.ɵɵtext(21, \" Use penalty timer \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"button\", 14, 15);\n        i0.ɵɵlistener(\"click\", function TimerComponent_Template_button_click_22_listener() {\n          return ctx.onStart();\n        });\n        i0.ɵɵtext(24, \" Start \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 12);\n        i0.ɵɵelementStart(26, \"mat-checkbox\", 13);\n        i0.ɵɵlistener(\"change\", function TimerComponent_Template_mat_checkbox_change_26_listener($event) {\n          return ctx.onChangeAutoTimerCheckbox($event);\n        });\n        i0.ɵɵtext(27, \" Auto start next timer \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"button\", 16, 17);\n        i0.ɵɵlistener(\"click\", function TimerComponent_Template_button_click_28_listener() {\n          return ctx.onStop();\n        });\n        i0.ɵɵtext(30, \" Stop \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 1);\n        i0.ɵɵelement(33, \"div\", 2);\n        i0.ɵɵelementStart(34, \"div\", 18);\n        i0.ɵɵelementStart(35, \"p\", 19);\n        i0.ɵɵlistener(\"click\", function TimerComponent_Template_p_click_35_listener() {\n          return ctx.toggleShowHideInstructions();\n        });\n        i0.ɵɵtext(36, \"Click to Show/Hide instructions\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(37, TimerComponent_div_37_Template, 24, 0, \"div\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c4, ctx.paragraphFontSize));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind2(11, 7, ctx.minutes_minutes, \"2.0\"), \":\", i0.ɵɵpipeBind2(12, 10, ctx.minutes_seconds, \"2.0\"), \"\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.activity_loaded);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"checked\", ctx.chkboxPenaltyTime);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"checked\", ctx.chkboxAutoTimer);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngIf\", ctx.showInstructions);\n      }\n    },\n    directives: [i1.MatSlider, i2.NgStyle, i2.NgIf, i3.TimerItemComponent, i4.TimerListComponent, i5.MatCheckbox],\n    pipes: [i2.DecimalPipe],\n    styles: [\".set_time[_ngcontent-%COMP%]{background-color:green}\"]\n  });\n  return TimerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}