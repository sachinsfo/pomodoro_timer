{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { TimerTypeEnum } from 'src/app/shared/enums/timertype.enum';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/icon\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"btnLoadActivity\"];\n\nfunction TimerListComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"File upload successful\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TimerListComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Unable to read the file\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TimerListComponent_div_13_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"check_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TimerListComponent_div_13_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"highlight_off\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TimerListComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"mat-icon\", 19);\n    i0.ɵɵlistener(\"click\", function TimerListComponent_div_13_Template_mat_icon_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const timer_index_r6 = restoredCtx.index;\n      const timer_r5 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onDelete(timer_index_r6, timer_r5);\n    });\n    i0.ɵɵtext(3, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 20);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 20);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 18);\n    i0.ɵɵtemplate(9, TimerListComponent_div_13_div_9_Template, 3, 0, \"div\", 21);\n    i0.ɵɵtemplate(10, TimerListComponent_div_13_div_10_Template, 3, 0, \"div\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"div\", 18);\n    i0.ɵɵelement(12, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const timer_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.getTimerName(timer_r5.type), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", timer_r5.time_in_min, \"m \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", timer_r5.is_complete);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !timer_r5.is_complete);\n  }\n}\n\nexport let TimerListComponent = /*#__PURE__*/(() => {\n  class TimerListComponent {\n    constructor() {\n      this.timers = [];\n      this.loadActivityEmit = new EventEmitter();\n      this.activity_loaded = false;\n      this.uploaded_file_name = 'No file chosen';\n      this.file_content = '';\n      this.displayFileReadError = false;\n      this.fileUploadSuccessful = false;\n      this.file_uploaded_once = false;\n      this.file_name = '';\n      this.total_time_left = 0;\n      this.time_left_hrs = 0;\n      this.time_left_min = 0;\n      this.time_left_sec = 0;\n    }\n\n    ngOnInit() {}\n\n    calcTotalTimeLeft(seconds_remaining = 0) {\n      this.total_time_left = 0;\n      let flag = true;\n\n      if (this.activity_loaded) {\n        for (var i = 0; i < this.timers.length; i++) {\n          let t = this.timers[i]; // first incomplete timer is the current timer\n          // So, seconds_remaining is the seconds_remaining of the current timer\n\n          if (!t.is_complete && flag) {\n            this.total_time_left += Math.floor(seconds_remaining / 60);\n            flag = false;\n          } else if (!this.timers[i].is_complete) {\n            this.total_time_left += t.time_in_min;\n          }\n        }\n      } else {\n        this.timers.forEach(t => {\n          if (!t.is_complete) this.total_time_left += t.time_in_min;\n        });\n      }\n\n      this.time_left_hrs = Math.floor(this.total_time_left / 60);\n      this.time_left_min = this.total_time_left % 60;\n      this.time_left_sec = seconds_remaining % 60;\n    }\n\n    onAdd(newTimer) {\n      // add only if the activity is not loaded\n      if (!this.activity_loaded) {\n        //newTimer.time_in_min = 0.1;\n        this.timers.push(newTimer); //console.log(this.timers)\n\n        this.calcTotalTimeLeft();\n      } else {//TODO: toastr notification\n      }\n    }\n\n    timerComplete(num_of_timers_completed) {\n      let t = 0;\n      this.timers.forEach(timer => {\n        if (t < num_of_timers_completed) {\n          timer.is_complete = true;\n          t += 1;\n        }\n      });\n      this.calcTotalTimeLeft();\n    }\n\n    getTimerName(typeId) {\n      return TimerTypeEnum[Number(typeId)];\n    }\n\n    onDelete(timer_index, timer) {\n      // Can delete only if load activity is not clicked\n      if (!this.activity_loaded) {\n        if (!timer.is_complete) this.timers.splice(timer_index, 1);\n        this.calcTotalTimeLeft();\n      } else {//TODO: toastr notification\n      }\n    }\n\n    loadActivity() {\n      this.loadActivityEmit.emit(this.timers);\n      this.btnLoadActivity.nativeElement.disabled = true;\n      this.activity_loaded = true;\n    }\n\n    saveActivity() {\n      let downloadTimersObj = {\n        \"timers\": this.timers\n      };\n      var blob = new Blob([JSON.stringify(downloadTimersObj)], {\n        type: 'text/plain;charset=utf-8'\n      });\n\n      if (!this.file_name) {\n        this.file_name = Date.now().toString();\n      }\n\n      this.file_name = this.file_name.replace(/[^a-zA-Z0-9._]/g, '');\n      saveAs(blob, `${this.file_name}.txt`);\n    }\n\n    onFileUpload(fileList) {\n      let file = fileList[0];\n      let fileReader = new FileReader();\n      fileReader.readAsText(file, \"UTF-8\");\n      let self = this;\n\n      fileReader.onloadend = x => {\n        self.timers = JSON.parse(fileReader.result)['timers']; // all timers are false when they are uploaded\n\n        self.timers.forEach(element => {\n          element.is_complete = false;\n          if (element.time_in_min <= 0) element.time_in_min = 1;\n          if (element.time_in_min > 99) element.time_in_min = 99;\n        });\n        self.calcTotalTimeLeft();\n        this.file_uploaded_once = true;\n        this.fileUploadSuccessful = true;\n        this.displayFileReadError = false;\n      }; // TODO not working as expected\n\n\n      fileReader.onerror = error => {\n        self.displayFileReadError = true;\n        this.fileUploadSuccessful = false;\n      };\n    }\n\n  }\n\n  TimerListComponent.ɵfac = function TimerListComponent_Factory(t) {\n    return new (t || TimerListComponent)();\n  };\n\n  TimerListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TimerListComponent,\n    selectors: [[\"app-timer-list\"]],\n    viewQuery: function TimerListComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.btnLoadActivity = _t.first);\n      }\n    },\n    outputs: {\n      loadActivityEmit: \"loadActivityEmit\"\n    },\n    decls: 36,\n    vars: 17,\n    consts: [[1, \"row\"], [1, \"col-xs-12\"], [2, \"color\", \"brown\"], [1, \"row\", 2, \"padding\", \"10px\"], [1, \"col-xs-8\"], [\"for\", \"uploadFile\"], [\"name\", \"uploadFile\", \"type\", \"file\", 3, \"disabled\", \"change\"], [\"style\", \"color: green;\", 4, \"ngIf\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-info\", \"btn-block\", 3, \"click\"], [\"btnLoadActivity\", \"\"], [\"for\", \"file_name\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-info\", \"btn-block\", 2, \"padding\", \"10px\", 3, \"click\"], [\"btnSaveActivity\", \"\"], [2, \"color\", \"green\"], [2, \"color\", \"red\"], [1, \"col-xs-2\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"col-xs-2\", \"text-center\"], [4, \"ngIf\"]],\n    template: function TimerListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"h3\", 2);\n        i0.ɵɵtext(3, \" Timer list \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Upload activity\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function TimerListComponent_Template_input_change_8_listener($event) {\n          return ctx.onFileUpload($event.target.files);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 0);\n        i0.ɵɵelementStart(10, \"div\", 4);\n        i0.ɵɵtemplate(11, TimerListComponent_div_11_Template, 2, 0, \"div\", 7);\n        i0.ɵɵtemplate(12, TimerListComponent_div_12_Template, 2, 0, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, TimerListComponent_div_13_Template, 13, 4, \"div\", 9);\n        i0.ɵɵelementStart(14, \"div\", 0);\n        i0.ɵɵelementStart(15, \"div\", 1);\n        i0.ɵɵtext(16);\n        i0.ɵɵpipe(17, \"number\");\n        i0.ɵɵpipe(18, \"number\");\n        i0.ɵɵpipe(19, \"number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 3);\n        i0.ɵɵelementStart(21, \"div\", 4);\n        i0.ɵɵelementStart(22, \"button\", 10, 11);\n        i0.ɵɵlistener(\"click\", function TimerListComponent_Template_button_click_22_listener() {\n          return ctx.loadActivity();\n        });\n        i0.ɵɵtext(24, \" Load activity \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 3);\n        i0.ɵɵelementStart(26, \"div\", 4);\n        i0.ɵɵelementStart(27, \"label\", 12);\n        i0.ɵɵtext(28, \"File name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function TimerListComponent_Template_input_ngModelChange_29_listener($event) {\n          return ctx.file_name = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(30, \"\\u00A0.txt \");\n        i0.ɵɵelement(31, \"br\");\n        i0.ɵɵelement(32, \"br\");\n        i0.ɵɵelementStart(33, \"button\", 14, 15);\n        i0.ɵɵlistener(\"click\", function TimerListComponent_Template_button_click_33_listener() {\n          return ctx.saveActivity();\n        });\n        i0.ɵɵtext(35, \" Save activity to a file \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"disabled\", ctx.activity_loaded || ctx.file_uploaded_once);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.fileUploadSuccessful);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.displayFileReadError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.timers);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate3(\" Time left = \", i0.ɵɵpipeBind2(17, 8, ctx.time_left_hrs, \"2.0\"), \" hr \", i0.ɵɵpipeBind2(18, 11, ctx.time_left_min, \"2.0\"), \" min \", i0.ɵɵpipeBind2(19, 14, ctx.time_left_sec, \"2.0\"), \" sec \");\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngModel\", ctx.file_name);\n      }\n    },\n    directives: [i1.NgIf, i1.NgForOf, i2.MatIcon, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    pipes: [i1.DecimalPipe],\n    styles: [\"\"]\n  });\n  return TimerListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}