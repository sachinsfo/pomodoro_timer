{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { TimerTypeEnum } from 'src/app/shared/enums/timertype.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"timeEntered\"];\n\nfunction TimerItemComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tt_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", tt_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tt_r2.name, \" \");\n  }\n}\n\nexport let TimerItemComponent = /*#__PURE__*/(() => {\n  class TimerItemComponent {\n    constructor() {\n      this.timerTypes = [];\n      this.selectedTimerType = 0;\n      this.inputTimeValue = 1;\n      this.newTimerItemEvent = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.insertTimerTypes();\n    }\n\n    insertTimerTypes() {\n      for (const val in Object.keys(TimerTypeEnum)) {\n        if (typeof TimerTypeEnum[val] !== 'string') continue;\n        let typeId = Number(val);\n        let typeName = TimerTypeEnum[Number(val)];\n        this.timerTypes.push({\n          'name': typeName,\n          'value': typeId\n        });\n      }\n\n      this.selectedTimerType = 0;\n    }\n\n    onAddItem() {\n      let time_entered = parseInt(this.timeEntered.nativeElement.value);\n      if (time_entered <= 0) time_entered = 1;\n      if (time_entered > 99) time_entered = 99;\n      let newTimerObj = {\n        type: this.selectedTimerType,\n        time_in_min: time_entered,\n        is_complete: false\n      };\n      this.newTimerItemEvent.emit(newTimerObj);\n    }\n\n  }\n\n  TimerItemComponent.ɵfac = function TimerItemComponent_Factory(t) {\n    return new (t || TimerItemComponent)();\n  };\n\n  TimerItemComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TimerItemComponent,\n    selectors: [[\"app-timer-item\"]],\n    viewQuery: function TimerItemComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.timeEntered = _t.first);\n      }\n    },\n    outputs: {\n      newTimerItemEvent: \"newTimerItemEvent\"\n    },\n    decls: 11,\n    vars: 3,\n    consts: [[1, \"row\"], [1, \"col-xs-4\"], [1, \"col-xs-2\"], [1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"step\", \"1\", \"pattern\", \"\\\\d+\", \"value\", \"1\", \"placeholder\", \"minutes\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"timeEntered\", \"\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [3, \"value\"]],\n    template: function TimerItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function TimerItemComponent_Template_select_ngModelChange_3_listener($event) {\n          return ctx.selectedTimerType = $event;\n        });\n        i0.ɵɵtemplate(4, TimerItemComponent_option_4_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 2);\n        i0.ɵɵelementStart(6, \"input\", 5, 6);\n        i0.ɵɵlistener(\"ngModelChange\", function TimerItemComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.inputTimeValue = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 1);\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function TimerItemComponent_Template_button_click_9_listener() {\n          return ctx.onAddItem();\n        });\n        i0.ɵɵtext(10, \" Add \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedTimerType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.timerTypes);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.inputTimeValue);\n      }\n    },\n    directives: [i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgModel, i2.NgForOf, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.NumberValueAccessor, i1.DefaultValueAccessor, i1.PatternValidator],\n    styles: [\"\"]\n  });\n  return TimerItemComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}